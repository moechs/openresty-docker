location = /status {
  include access.conf;
  content_by_lua_block {
    local config = config
    local server_status = 'DOWN\n'
    local status = ngx.HTTP_SERVICE_UNAVAILABLE
    if config:get("status") == 1 then
      server_status = 'UP\n'
      status = ngx.HTTP_OK
    end
    ngx.status = status
    ngx.header.Content_Type = "text/plain"
    ngx.header.Content_Length = #server_status
    ngx.print(server_status)
  }
}

location = /status/set/up {
  include access.conf;
  content_by_lua_block {
    if ngx.var.request_method ~= "POST" then
       local msg="Error 405: Method Not Allowed\n"
       ngx.status = ngx.HTTP_NOT_ALLOWED
       ngx.header.Content_Type = "text/plain"
       ngx.header.Content_Length = #msg
       ngx.print(msg)
       return
    end
    local config = config
    local server_status = 'UP\n'
    config:set("status", 1)
    ngx.header.Content_Type = "text/plain"
    ngx.header.Content_Length = #server_status
    ngx.print(server_status)
  }
}

location = /status/set/down {
  include access.conf;
  content_by_lua_block {
    if ngx.var.request_method ~= "POST" then
       local msg="Error 405: Method Not Allowed\n"
       ngx.status = ngx.HTTP_NOT_ALLOWED
       ngx.header.Content_Type = "text/plain"
       ngx.header.Content_Length = #msg
       ngx.print(msg)
       return
    end
    local config = config
    local server_status = 'DOWN\n'
    config:set("status", 0)
    ngx.header.Content_Type = "text/plain"
    ngx.header.Content_Length = #server_status
    ngx.print(server_status)
  }
}

location = /config {
  include access.conf;
  content_by_lua_block {
    local config = config
    local result = config:echo()
    ngx.header.Content_Type = "application/json"
    ngx.header.Content_Length = #result
    ngx.print(result)
  }
}

location ~ '^/config/get/(?P<config_key>[a-zA-Z][0-9a-zA-Z\.\-_]{0,31})' {
  include access.conf;
  content_by_lua_block {
    local config = config
    local config_key = ngx.var.config_key
    local result = config:get(config_key)
    if not result then
      result = ""
      ngx.status = ngx.HTTP_NOT_FOUND
    end
    result = result .. "\n"
    ngx.header.Content_Type = "text/plain"
    ngx.header.Content_Length = #result
    ngx.print(result)
  }
}

location ~ '^/config/(set|add)/(?P<config_key>[a-zA-Z][a-zA-Z0-9\.\-_]{0,31})/(?P<config_value>.+)' {
  include access.conf;
  content_by_lua_block {
    if ngx.var.request_method ~= "POST" then
       local msg="Error 405: Method Not Allowed\n"
       ngx.status = ngx.HTTP_NOT_ALLOWED
       ngx.header.Content_Type = "text/plain"
       ngx.header.Content_Length = #msg
       ngx.print(msg)
       return
    end
    local config = config
    local config_key = ngx.var.config_key
    local config_value = tonumber(ngx.var.config_value)
    local old_value = config:get(config_key)
    local status = ngx.HTTP_OK
    local result = "Key: <"
    if not config_value then
      config_value = ngx.var.config_value
    end
    if config_value ~= old_value then
      local ok, err = config:set(config_key, config_value)
      if not err then
        if old_value then
          result = result .. config_key .. ">\tValue: "
                .. config_value .. "\tOld value: " .. old_value
        else
          result = result .. config_key .. ">\tValue: "
                .. config_value .. "\tNew key added."
        end
      else
        status = ngx.HTTP_SERVICE_UNAVAILABLE
        result = result .. config_key .. ">\tValue: "
                .. config_value .. "\tError: " .. err
      end
    else
      result =  result .. config_key .. ">\tValue: " .. config_value
            .. "\tNo change."
    end
    result = result .. "\n"
    ngx.status = status
    ngx.header.Content_Type = "text/plain"
    ngx.header.Content_Length = #result
    ngx.print(result)
  }
}

location ~ '^/config/del/(?P<config_key>[a-zA-Z][0-9a-zA-Z\.\-_]{0,31})' {
  include access.conf;
  content_by_lua_block {
    if ngx.var.request_method ~= "POST" then
       local msg="Error 405: Method Not Allowed\n"
       ngx.status = ngx.HTTP_NOT_ALLOWED
       ngx.header.Content_Type = "text/plain"
       ngx.header.Content_Length = #msg
       ngx.print(msg)
       return
    end
    local config = config
    local config_key = ngx.var.config_key
    local old_value = config:get(config_key)
    local ok, err
    local rs = "success"
    local status = ngx.HTTP_OK
    local result = "Key: <"
    if old_value then
      ok, err = config:del(config_key)
      if err then
        rs = " failed\t" .. err
        status = ngx.HTTP_SERVICE_UNAVAILABLE
      end
      result = result .. config_key .. ">\tValue: " .. old_value .. "\t Delete " .. rs
    else
      status = ngx.HTTP_NOT_FOUND
      result = result .. config_key .. ">\tNot found."
    end
    result = result .. "\n"
    ngx.status = status
    ngx.header.Content_Type = "text/plain"
    ngx.header.Content_Length = #result
    ngx.print(result)
  }
}
