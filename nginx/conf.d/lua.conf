#lua_package_path '/usr/local/openresty/site/lualib/?.ljbc;/usr/local/openresty/site/lualib/?/init.ljbc;/usr/local/openresty/lualib/?.ljbc;/usr/local/openresty/lualib/?/init.ljbc;/usr/local/openresty/site/lualib/?.lua;/usr/local/openresty/site/lualib/?/init.lua;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/?/init.lua;./?.lua;/usr/local/openresty/luajit/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?/init.lua;;';
#lua_package_cpath '/usr/local/openresty/site/lualib/?.so;/usr/local/openresty/lualib/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;;';

#lua_shared_dict sets 1m;
#lua_shared_dict prometheus_metrics 10m;
#lua_shared_dict acme 16m;

# required to verify Let's Encrypt API
#lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
#lua_ssl_verify_depth 2;

#init_by_lua_block {
#  config = require "resty.sets"
#  config:setdefault("status", 1)
#  config:load()
#  require("resty.acme.autossl").init({
#    -- setting the following to true
#    -- implies that you read and accepted https://letsencrypt.org/repository/
#    tos_accepted = true,
#    -- uncomment following for first time setup
#    -- staging = true,
#    -- uncomment following to enable RSA + ECC double cert
#    -- domain_key_types = { 'rsa', 'ecc' },
#    -- uncomment following to enable tls-alpn-01 challenge
#    -- enabled_challenge_handlers = { 'http-01', 'tls-alpn-01' },
#    account_key_path = "/etc/nginx/certs/acme_account.key",
#    account_email = "youemail@youdomain.com",
#    domain_whitelist = { "example.com" },
#  })
#}

#init_worker_by_lua_block {
#  prometheus = require("prometheus").init("prometheus_metrics")
#  metric_requests = prometheus:counter(
#    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
#  metric_latency = prometheus:histogram(
#    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
#  metric_connections = prometheus:gauge(
#    "nginx_http_connections", "Number of HTTP connections", {"state"})
#  require("resty.acme.autossl").init_worker()
#}

#log_by_lua_block {
#  metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
#  metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
#}
