fastcgi_intercept_errors        on;
proxy_intercept_errors          on;

error_page 400 401 403 404 405 407 408 409 410 411 412 413 416 418 429 500 502 503 504 505 @error_page;

location /error_page/ {
  root /etc/nginx/html/;
  index index.html;
  try_files $uri /error_page/index.html;
}
location @error_page {
  root /etc/nginx/html/error_page/;
  access_by_lua_block {
    local x_forwarded_for = ngx.var.http_x_forwarded_for
    ngx.var.clientip = x_forwarded_for and string.match(x_forwarded_for, "([^,%s]+)") or ngx.var.remote_addr
    return
  }
  content_by_lua_block {
    local MESSAGE = {
      s400 = 'Bad Request',
      s401 = 'Unauthorized',
      s403 = 'Forbidden',
      s404 = 'Not Found',
      s405 = 'Method Not Allowed',
      s407 = 'Proxy Authentication Required',
      s408 = 'Request Timeout',
      s409 = 'Conflict',
      s410 = 'Gone',
      s411 = 'Length Required',
      s412 = 'Precondition Failed',
      s413 = 'Payload Too Large',
      s416 = 'Requested Range Not Satisfiable',
      s418 = 'I\'m a teapot',
      s429 = 'Too Many Requests',
      s500 = 'Internal Server Error',
      s502 = 'Bad Gateway',
      s503 = 'Service Unavailable',
      s504 = 'Gateway Timeout',
      s505 = 'HTTP Version Not Supported'
    }
    local DESCRIPTION = {
      s400 = 'The server did not understand the request',
      s401 = 'The requested page needs a username and a password',
      s403 = 'Access is forbidden to the requested page',
      s404 = 'The server can not find the requested page',
      s405 = 'The method specified in the request is not allowed',
      s407 = 'You must authenticate with a proxy server before this request can be served',
      s408 = 'The request took longer than the server was prepared to wait',
      s409 = 'The request could not be completed because of a conflict',
      s410 = 'The requested page is no longer available',
      s411 = 'The "Content-Length" is not defined. The server will not accept the request without it',
      s412 = 'The pre condition given in the request evaluated to false by the server',
      s413 = 'The server will not accept the request, because the request entity is too large',
      s416 = 'The requested byte range is not available and is out of bounds',
      s418 = 'Attempt to brew coffee with a teapot is not supported',
      s429 = 'Too many requests in a given amount of time',
      s500 = 'The server met an unexpected condition',
      s502 = 'The server received an invalid response from the upstream server',
      s503 = 'The server is temporarily overloading or down',
      s504 = 'The gateway has timed out',
      s505 = 'The server does not support the "http protocol" version'
    }
    --local geoiplocation = ngx.var.geoip2_iso_code or ''
    --geoiplocation = geoiplocation .. (ngx.var.geoip2_country_name and ' ' .. ngx.var.geoip2_country_name or '')
    --geoiplocation = geoiplocation .. (ngx.var.geoip2_city_name and ' ' .. ngx.var.geoip2_city_name or '')
    local original_uri = (ngx.var.http_x_forwarded_proto or ngx.var.scheme) .. '://' .. ngx.var.http_host .. (ngx.var.http_x_original_uri or ngx.var.request_uri)
    local tostring = tostring
    local status = tostring(ngx.status)
    local html_key = 's' .. status
    local template = require "resty.template"
    --local view = template.new "error_page_template01.html"
    --local view = template.new "error_page_template02.html"
    local view = template.new "error_page_template03.html"
    view.code = status
    view.message = MESSAGE[html_key]
    view.description = DESCRIPTION[html_key]
    view.host = ngx.var.http_host
    view.original_uri = original_uri
    view.client_ip = ngx.var.remote_addr
    --view.client_ip = ngx.var.remote_addr .. ((geoiplocation ~= '') and ' (' .. geoiplocation .. ')' or '')
    view.request_id = ngx.var.req_id
    view.servertime = os.date('!%Y-%m-%d %H:%M:%S %Z', ngx.time())
    view:render()
  }
}
