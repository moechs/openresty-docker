# /etc/nginx/conf.d/tools_map.conf
# /etc/nginx/conf.d/geoip2.conf
# /etc/nginx/modules/http_geoip2.conf

set $x '0';

if ($http_user_agent ~* '(curl|Wget|PowerShell|Go-http-client)/.+') {
  set $x "${x}0";
}
if ($request_method ~ 'GET') {
  set $x "${x}0";
}
if ($uri = '/') {
  set $x "${x}0";
}
if ($x = "0000"){
  rewrite . /$remote_addr last;
}

location = /ip { echo $remote_addr; }

location ~ '/(?<clientip>(([0-9a-f]{0,4}:){1,7}[0-9a-f]{1,4}|([0-9]{1,3}\.){3}[0-9]{1,3}))$' {
  content_by_lua_block {
    local qqwry = require 'tools.qqwry'
    local area, location = qqwry.query(ngx.var.clientip)
    local result = '   IP:\t' .. ngx.var.clientip ..
      ((ngx.var.geoip2_country_name or ngx.var.geoip2_iso_code or ngx.var.geoip2_city_name) and '\n MMDB:\t' or '') ..
      (ngx.var.geoip2_country_name and ngx.var.geoip2_country_name or '') ..
      (ngx.var.geoip2_iso_code and '(' .. ngx.var.geoip2_iso_code .. ')' or '') ..
      (ngx.var.geoip2_city_name and ngx.var.geoip2_city_name or '')
    if area and location then
      area = string.gsub(area,'%s','')
      location = string.gsub(location,'%s','')
      if area ~= '' and location ~= '' then
        result = result .. '\nQQWRY:\t' .. area .. location
        result = string.gsub(result,'UNKNOWN','')
        result = string.gsub(result,'纯真网络','')
        result = string.gsub(result,'CZ88.NET','')
        result = string.gsub(result,'-Orange','')
        result = string.gsub(result,'%d+年%d+月%d+日IP数据','IANA保留地址')
        result = string.gsub(result,'对方和您在同一内部网','局域网')
      end
    end
    ngx.header.content_type = "text/plain"
    ngx.say(result)
  }
}

location ~ '/((?<clientip>(([0-9a-f]{0,4}:){1,7}[0-9a-f]{1,4}|([0-9]{1,3}\.){3}[0-9]{1,3}))|ip)/?(?<format>(json|text))?$' {
  content_by_lua_block {
    local cjson = cjson
    local pretty = require "resty.prettycjson"
    local qqwry = require 'tools.qqwry'
    if ngx.var.clientip == '' or not ngx.var.clientip then
      ngx.var.clientip = ngx.var.remote_addr
    end
    local area, location = qqwry.query(ngx.var.clientip)
    area = string.gsub(area,'纯真网络','')
    location = string.gsub(location, 'CZ88.NET', '')
    location = string.gsub(location, 'Orange', '')
    location = string.gsub(location, '%s+', '')
    location = string.gsub(location, '对方和您在同一内部网', '局域网')
    location = string.gsub(location, '%d+年%d+月%d+日IP数据', 'IANA保留地址')
    if area and location then
      area = string.gsub(area,'%s','')
      location = string.gsub(location,'%s','')
    end
    if area == '' then
      area = (ngx.var.geoip2_city_name and ngx.var.geoip2_city_name or '')
    end
    if location == '' then
      location =  (ngx.var.geoip2_country_name and ngx.var.geoip2_country_name or '') ..
        (ngx.var.geoip2_iso_code and '(' .. ngx.var.geoip2_iso_code .. ')' or '')
    end
    if ngx.var.format == 'json' then
      ngx.header.content_type = 'application/json'
      local data = {}
      data['ip'] = ngx.var.clientip
      data['area'] = area
      data['location'] = location
      ngx.say(pretty(data, '\n', '  '))
    else
      ngx.header.content_type = "text/plain"
      ngx.say(ngx.var.clientip .. '\t\t' .. area .. '\t\t' .. location)
    end
  }
}

location ~ '^/(?<phone_num>[0-9]{7,11})/?(?<format>(text|json))?$' {
  content_by_lua_block {
    local phone = require "tools.phone"
    local result = phone.find(ngx.var.phone_num)
    if not result then
      ngx.header.content_type = "text/plain"
      ngx.status = 404
      return ngx.say("404")
    end
    if ngx.var.format == 'json' then
      ngx.header.content_type = 'application/json'
      local pretty = require "resty.prettycjson"
      local pos, data = 1, {}
      result = result .. '|'
      for curPos in function() return string.find(result, '|', pos) end do
        table.insert(data, string.sub(result, pos, curPos - 1))
        pos = curPos + 1
      end
      if #data == 5 then
        local d = {}
        d['PhoneNum'] = ngx.var.phone_num
        d['Province'] = data[1]
        d['City'] = data[2]
        d['AreaZone'] = data[4]
        d['ZipCode'] = data[3]
        d['CardType'] = data[5]
        ngx.say(pretty(d, '\n', '  '))
      else
        ngx.status = 500
        ngx.say("500")
      end
    else
      ngx.say(ngx.var.phone_num .. "\t" .. result)
    end
  }
}

#location /http {
#  if ( $request_method !~ GET|HEAD ) {
#    return 403;
#  }
#  if ($http_user_agent !~* '(curl|Wget|PowerShell|Go-http-client|jetstack-cert-manager)/.+') {
#    return 403;
#  }
#  slice           1m;
#  add_header      X-Proxy-Scheme   $myproxy_scheme;
#  add_header      X-Proxy-Host   $myproxy_host;
#  add_header      X-Proxy-Port   $myproxy_port;
#  add_header      X-Proxy-Uri    $myproxy_uri;
#  add_header      X-Proxy-Uri-Dir  $myproxy_uri_dir;
#  add_header      X-Proxy-Uri-File $myproxy_uri_file;
#  proxy_ignore_headers Expires Cache-Control;
#  proxy_ssl_server_name on;
#  proxy_set_header  Referer $myproxy_scheme://$myproxy_host$myproxy_port$myproxy_uri;
#  proxy_set_header  Host  $myproxy_host;
#  proxy_set_header  Range $slice_range;
#  proxy_pass        $myproxy_scheme://$myproxy_host$myproxy_port$myproxy_uri;
#  proxy_redirect    ~^(/.*)  $scheme://$host:$server_port/$myproxy_scheme://$myproxy_host$myproxy_port/$1;
#  proxy_redirect    ~^(http.+) $scheme://$host:$server_port/$1;
#}
